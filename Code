### Natural Language Proceessing 
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#Data
yelp = pd.read_csv('C:\\Users\\Kieu\\Python-Data-Science-and-Machine-Learning-Bootcamp\\Python-Data-Science-and-Machine-Learning-Bootcamp\\Machine Learning Sections\\Natural-Language-Processing\\yelp.csv')

yelp.info()
yelp.describe()
yelp.head()

#Data Analysis
print(len(yelp['text']))

yelp['text length'] = yelp['text'].apply(len)

g = sns.FacetGrid(yelp,col='stars')
g.map(plt.hist,'text length')

sns.boxplot(x='stars',y='text length',data=yelp)

sns.countplot(x='stars',data=yelp)

star = yelp.groupby('stars').mean()
star

star.corr()

sns.heatmap(star.corr(),annot=True)

yelp_class = yelp[(yelp.stars==1)|(yelp.stars==5)]

x = yelp_class['text']
y = yelp_class['stars']

#Data Training 
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer()

x = cv.fit_transform(x)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y,test_size=0.3,random_state=101)
#Data Modeling 
from sklearn.naive_bayes import MultinomialNB

nb = MultinomialNB

nb.fit(x_train,y_train)

predictions = nb.predict(x_test)

#Conculsion
from sklearn.metrics import Classifcation_report,Confusion_matrix

print(confusion_matrix(y_test,predictions))
print('\n')
print(classification_report(y_test,predictions))
